05-171023 藤井陽介

【動作例】
# reverse [1;2;3;4;5];;
- : int list = [5; 4; 3; 2; 1]
# reversef [1;2;3;4;5];;
- : int list = [5; 4; 3; 2; 1]

【コード】
let rec fold_right f arr e =
  match arr with
  | [] -> e
  | x :: xs -> f x (fold_right f xs e);;
let rec rev arr acc =
  match arr with
  | [] -> acc
  | x :: xs -> rev xs (x :: acc);;

(* 再帰バージョン *)
let reverse arr = rev arr [];;

(* fold_leftは簡単なのでfold_rightでfold_leftを実現してそれを用いて行う *)
(* let reversef arr = fold_right (fun x e -> e @ [x]) arr [];; *)
(* 右からは動かしようがないから右から適用する関数を返すようにする *)
let reversef arr = (fold_right (fun b g x -> g (b::x)) arr (fun x -> x)) [];;

【考察】
fold_rightでreverseするのがなかなか難しかった。関数の部分適用自体を返せなくても恒等関数をくるむことでそれが可能になるということがわかった。
