藤井陽介 05-171023

【動作例】
# #use "prob7.ml";;
val filter : ('a -> bool) -> 'a list -> 'a list = <fun>
val map : ('a -> 'b) -> 'a list -> 'b list = <fun>
val concatMap : ('a -> 'b list) -> 'a list -> 'b list = <fun>
val delete : 'a -> 'a list -> 'a list = <fun>
val perm : 'a list -> 'a list list = <fun>
# perm [1];;
- : int list list = [[1]]
# perm [1;2];;
- : int list list = [[1; 2]; [2; 1]]
# perm [1;2;3];;
- : int list list =
[[1; 2; 3]; [1; 3; 2]; [2; 1; 3]; [2; 3; 1]; [3; 1; 2]; [3; 2; 1]]

【コード】
(* permutationを実装する。特定の要素を消すためにfilterを応用する。
また全ての要素を一つずつ取り出して一つ一つで作っていきたいのでHaskellのconcatMapを自作する。 *)
let rec filter f arr =
    match arr with
    | [] -> []
    | x :: xs when f x -> x :: filter f xs
    | x :: xs -> filter f xs;;
let rec map f arr =
    match arr with
    | [] -> []
    | x :: xs -> f x :: map f xs;;
let rec concatMap f arr =
    match arr with
    | [] -> []
    | x :: xs -> (f x) @ concatMap f xs;;
let delete x arr =
    filter (fun y -> x != y) arr;;

let rec perm arr =
    match arr with
    | [] -> [[]]
    | xs -> concatMap (fun x -> map (fun y -> x :: y) (perm (delete x xs))) xs;;

【考察】
一応すべての関数を自作で制作してみた。[[]]とやってしまうと余分な空の配列が入ってしまう気がして最初[]にしていたがそれによって全ての結果が[]になるバグとなってしまったので[]と[[]]が重要な違いになっていることがわかった。
