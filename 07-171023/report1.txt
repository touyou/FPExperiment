171023 藤井陽介

【実行例】
# 1 + true;;
Error = Invalid Type
# 1 + 2;;
- = VInt(3)
# true = true;;
Error = Invalid Type
# 1 = 3;;
- = VBool(false)
# if 1 then 25 else 33;;
Error = Invalid Type
# if 1 = false then true else false;;
Error = Invalid Type
# if 1 = 1 then true else 3;;
Error = Invalid Type
# let x = 6 in if x then 2 else 3;;
Error = Invalid Type
# let x = 6 in if x = 6 then 2 else 3;;
- = VInt(2)
# let f = 17;;
f = VInt(17)
# f && true;;
Error = Invalid Type
# let rec g x = if x=1 then 12 else g true in g 10;;
Error = Invalid Type
# let rec f x = if x=0 then 112 else f (x-1) in f 100;;
- = VInt(112)

【コード】
(* infer_expr: tyenv->expr->ty * constraints *)
let rec infer_expr env e =
  match e with
  | EConstInt i -> (TyInt, [])
  | EConstBool b -> (TyBool, [])
  | EVar x ->
    (try
       (lookup x env, [])
     with
     | Unbound -> raise EvalUnbound)
  | ELet (x, e1, e2) ->
    let (t1, c1) = infer_expr env e1 in
    let env' = (x, t1) :: env in
    let (t2, c2) = infer_expr env' e2 in
    (t2, c1 @ c2)
  | EIf (e1, e2, e3) ->
    let (t1, c1) = infer_expr env e1 in
    let (t2, c2) = infer_expr env e2 in
    let (t3, c3) = infer_expr env e3 in
    (t2, [(t1,TyBool); (t2, t3)] @ c1 @ c2 @ c3)
  | EFun (x, e) ->
    let alpha = TyVar (new_tyvar ()) in
    let env' = (x, alpha) :: env in
    let (t, c) = infer_expr env' e in
    (TyFun (alpha, t), c)
  | EApp (e1, e2) ->
    let (t1, c1) = infer_expr env e1 in
    let (t2, c2) = infer_expr env e2 in
    let alpha = TyVar (new_tyvar ()) in
    (alpha, ((t1, TyFun (t2, alpha)) :: c1) @ c2)
  | ELetRec (f, x, e1, e2) ->
    let alpha = TyVar (new_tyvar ()) in
    let beta = TyVar (new_tyvar ()) in
    let (t1, c1) = infer_expr ((f, TyFun (alpha, beta)) :: ((x, alpha) :: env)) e1 in
    let (t2, c2) = infer_expr ((f, TyFun (alpha, beta)) :: env) e2 in
    (t2, (t1, beta) :: c1 @ c2)
  | EAdd (e1, e2) ->
    let (t1, c1) = infer_expr env e1 in
    let (t2, c2) = infer_expr env e2 in
    (TyInt, [(t1, TyInt); (t2, TyInt)] @ c1 @ c2)
  | ESub (e1, e2) ->
    let (t1, c1) = infer_expr env e1 in
    let (t2, c2) = infer_expr env e2 in
    (TyInt, [(t1, TyInt); (t2, TyInt)] @ c1 @ c2)
  | EMul (e1, e2) ->
    let (t1, c1) = infer_expr env e1 in
    let (t2, c2) = infer_expr env e2 in
    (TyInt, [(t1, TyInt); (t2, TyInt)] @ c1 @ c2)
  | EDiv (e1, e2) ->
    let (t1, c1) = infer_expr env e1 in
    let (t2, c2) = infer_expr env e2 in
    (TyInt, [(t1, TyInt); (t2, TyInt)] @ c1 @ c2)
  | EEq (e1, e2) ->
    let (t1, c1) = infer_expr env e1 in
    let (t2, c2) = infer_expr env e2 in
    (TyBool, [(t1, TyInt); (t2, TyInt)] @ c1 @ c2)
  | ELt (e1, e2) ->
    let (t1, c1) = infer_expr env e1 in
    let (t2, c2) = infer_expr env e2 in
    (TyBool, [(t1, TyInt); (t2, TyInt)] @ c1 @ c2)
  | EAnd (e1, e2) ->
    let (t1, c1) = infer_expr env e1 in
    let (t2, c2) = infer_expr env e2 in
    (TyBool, [(t1, TyBool); (t2, TyBool)] @ c1 @ c2)
  | EOr (e1, e2) ->
    let (t1, c1) = infer_expr env e1 in
    let (t2, c2) = infer_expr env e2 in
    (TyBool, [(t1, TyBool); (t2, TyBool)] @ c1 @ c2)

(* infer_cmd: tyenv->cmd->ty*tyenv *)
let infer_cmd env c =
  try
    match c with
    | CExp e ->
      let (t, c) = infer_expr env e in
      let t' = ty_subst (unify c) t in
      (t', env)
    | CDecl (x, e) ->
      let (t, c) = infer_expr env e in
      let t' = ty_subst (unify c) t in
      (t', (x, t') :: env)
    | CRecDecl (f, x, e) ->
      let alpha = TyVar (new_tyvar ()) in
      let beta = TyVar (new_tyvar ()) in
      let (t, c) = infer_expr ((f, TyFun (alpha, beta)) :: (x, alpha) :: env) e in
      let t' = ty_subst (unify c) t in
      (t', (f, t') :: env)
    | CQuit -> (TyInt, env)
  with
  | TyError -> raise Unbound
  | EvalUnbound -> raise Unbound

【考察】
型推論中エラーが発生した時などは適宜エラーを吐くようにして
、それをmainやinfer_cmdなど呼び出し元で拾うように実装しました。infer_expr内では基本的にスライドのロジックを実装し、書かれていなかったEAddなどに関しては自分で決めた仕様（四則演算や比較の演算に使うのは数字だけ）に則って制約を返すように実装しました。
infer_cmdではまずinfer_exprで制約を生成し、その制約を解いてエラーが測れなかった時だけ新しい型環境と型の組を返すように実装しました。
