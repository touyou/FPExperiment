171023 藤井陽介

【実行例】
# let rec f x = if x = 0 then 10 else 2 + f (x - 1);;
f : int -> int = f(x)
# f 10;;
- : int = 30
# let rec g x = if x = 0 then 5 else 4 + g (x - 2) in g 20;;
- : int = 45
# let x = 5 in x + 3;;
- : int = 8
# (fun x -> x * x) (2 + 3);;
- : int = 25

【考察】
コードはex4内です。
再帰の部分を名前呼びにする方法がわからなかったので再帰関数のみVRecFunに単純置換されるERecFunをつかって辻褄をあわせています。
それ以外はスライド通りThunkに一度exprを入れて後で評価するようにしています。

【コード】
eval.ml
| EVar x ->
  (try
    let Thunk (e, env') = lookup x env in
    eval_expr env' e
  with
  | Unbound -> raise EvalUnbound)
| ELet (x, e1, e2) ->
  let th = Thunk (e1, env) in
  eval_expr (extend x th env) e2
| EFun (x, e) -> VFun (x, e, env)
| EApp (e1, e2) ->
  let v1 = eval_expr env e1 in
  let th = Thunk (e2, env) in
  (match v1 with
  | VFun (x, e, env') -> eval_expr (extend x th env') e
  | VRecFun (f, x, e, oenv) ->
    let th2 = Thunk (ERecFun (f, x, e, oenv), oenv) in
    let env' = extend x th (extend f th2 oenv) in
    eval_expr env' e
    (*let env' = extend x th (extend f (VRecFun (f, x, e, oenv)) oenv) in
    eval_expr env' e*)
  | _ -> raise EvalUnbound)
| ELetRec (f, x, e1, e2) ->
  let th = Thunk (ERecFun (f, x, e1, env), env) in
  let env' = extend f th env in
  (*let env' = extend f (VRecFun (f, x, e1, env)) env in*)
  eval_expr env' e2


  | CDecl (x, e) ->
    let v = eval_expr env e in
    let th = Thunk (e, env) in
    let env' = extend x th env in
    (x, env', v)
  | CRecDecl (f, x, e) ->
    let v = VRecFun (f, x, e, env) in
    let th = Thunk (ERecFun (f, x, e, env), env) in
    let env' = extend f th env in
    (f, env', v)
    (*let v = VRecFun (f, x, e, env) in
    let env' = extend f v env in
    (f, env', v)*)