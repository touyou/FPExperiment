171023 藤井陽介

【実行例】
# (1, true);;
- : int * bool = (1,true)
# [];;
- : 'a list = []
# 2 :: 4;;
- : int list = [2,4]
# 2 :: false;;
Type Error.
# match 10 with 5 -> true | 10 -> false | _ -> true;;
- : bool = false
# let x = (1, 3);;
x : int * int = (1,3)
# match x with (1, 1) -> 1 | (1, 3) -> 3;;
- : int = 3
# match x with true -> 2 | false -> 4;;
Type Error.

【考察】
パターンマッチングの型推論のために追加する型環境をもとめる再帰関数をあらたに定義し、パターンを一個一個取り出す再帰関数の中で使いました。ペアや空リストはそのまま単純に実装し、コンスに関してはひとまず型推論の間は前後の型をリストにしたものをもつTyListと推論し、制約に前後の型の一致を追加して、制約を解く時に一番前の型を採用するように実装しています。
またこのインタプリタから型をprintする機能を追加しいくつかのケースで意図通りの型がついていることを確認できました。
（前回のコードを流用しているため単一化の間違いが直せてない状態です。）


【コード】ex3内
eval.ml

(* infer *)
let rec infer_expr env e =
  match e with
  | EConstInt i -> (TyInt, [])
  | EConstBool b -> (TyBool, [])
  | EVar x ->
    (try
      (lookup x env, [])
    with
    | Unbound -> raise EvalUnbound)
  | EAdd (e1, e2)
  | ESub (e1, e2)
  | EMul (e1, e2)
  | EDiv (e1, e2) ->
    let (t1, c1) = infer_expr env e1 in
    let (t2, c2) = infer_expr env e2 in
    (TyInt, [(t1, TyInt); (t2, TyInt)] @ c1 @ c2)
  | EEq (e1, e2)
  | ELt (e1, e2) ->
    let (t1, c1) = infer_expr env e1 in
    let (t2, c2) = infer_expr env e2 in
    (TyBool, c1 @ c2)
  | EIf (e1, e2, e3) ->
    let (t1, c1) = infer_expr env e1 in
    let (t2, c2) = infer_expr env e2 in
    let (t3, c3) = infer_expr env e3 in
    (t2, [(t1,TyBool); (t2, t3)] @ c1 @ c2 @ c3)
  | ELet (x, e1, e2) ->
    let (t1, c1) = infer_expr env e1 in
    let env' = (x, t1) :: env in
    let (t2, c2) = infer_expr env' e2 in
    (t2, c1 @ c2)
  | EFun (x, e) ->
    let alpha = TyVar (new_tyvar ()) in
    let env' = (x, alpha) :: env in
    let (t, c) = infer_expr env' e in
    (TyFun (alpha, t), c)
  | EApp (e1, e2) ->
    let (t1, c1) = infer_expr env e1 in
    let (t2, c2) = infer_expr env e2 in
    let alpha = TyVar (new_tyvar ()) in
    (alpha, ((t1, TyFun (t2, alpha)) :: c1) @ c2)
  | ELetRec (f, x, e1, e2) ->
    let alpha = TyVar (new_tyvar ()) in
    let beta = TyVar (new_tyvar ()) in
    let (t1, c1) = infer_expr ((f, TyFun (alpha, beta)) :: ((x, alpha) :: env)) e1 in
    let (t2, c2) = infer_expr ((f, TyFun (alpha, beta)) :: env) e2 in
    (t2, (t1, beta) :: c1 @ c2)
  | EPair (e1, e2) ->
    let (t1, c1) = infer_expr env e1 in
    let (t2, c2) = infer_expr env e2 in
    (TyPair (t1, t2), c1 @ c2)
  | ENil ->
    (TyList [], [])
  | ECons (e1, e2) ->
    let (t1, c1) = infer_expr env e1 in
    let (t2, c2) = infer_expr env e2 in
    (TyList [t1; t2], (t2, t1) :: c1 @ c2)
  | EMatch (e, p) ->
    let (t, c) = infer_expr env e in
    let alpha = TyVar (new_tyvar ()) in
    (alpha, infer_match env p c t alpha)
and infer_match env p c t alpha =
  match p with
  | [] -> c
  | (pt, exp) :: pr ->
    let (pt, pc, penv) = pattern_appendenv pt in
    let (t', c') = infer_expr (penv @ env) exp in
    (t, pt) :: (alpha, t') :: c @ pc @ c'
and pattern_appendenv p =
  match p with
  | PInt _ -> (TyInt, [], [])
  | PBool _ -> (TyBool, [], [])
  | PVar x -> let alpha = TyVar (new_tyvar ()) in (alpha, [], [(x, alpha)])
  | PPair (p1, p2) ->
    let (t1, c1, env1) = pattern_appendenv p1 in
    let (t2, c2, env2) = pattern_appendenv p2 in
    (TyPair (t1, t2), c1@c2, env1@env2)
  | PNil ->
    let alpha = TyVar (new_tyvar ()) in
    (TyList [alpha], [], [])
  | PCons (p1, p2) ->
    let (t1, c1, env1) = pattern_appendenv p1 in
    let (t2, c2, env2) = pattern_appendenv p2 in
    let alpha = TyVar (new_tyvar ()) in
    (TyList [alpha], ((alpha, t1) :: (TyList [alpha], t2) :: c1 @ c2), env1 @ env2)

let infer_cmd env c =
  try
    match c with
    | CExp e ->
      let (t, c) = infer_expr env e in
      let t' = ty_subst (unify c) t in
      (t', env)
    | CDecl (x, e) ->
      let (t, c) = infer_expr env e in
      let t' = ty_subst (unify c) t in
      (t', (x, t') :: env)
    | CRecDecl (f, x, e) ->
      let alpha = TyVar (new_tyvar ()) in
      let beta = TyVar (new_tyvar ()) in
      let (t, c) = infer_expr ((f, TyFun (alpha, beta)) :: (x, alpha) :: env) e in
      let t' = ty_subst (unify c) t in
      let xt = ty_subst (unify c) alpha in
      (TyFun (xt, t'), (f, TyFun(alpha, t')) :: env)
  with
  | TyError -> raise Unbound
  | EvalUnbound -> raise Unbound

constraintSolver.ml
(* ty_subst : subst -> ty -> ty *)
let rec ty_subst s t =
  match t with
  | TyInt -> TyInt
  | TyBool -> TyBool
  | TyFun (x, y) -> TyFun (ty_subst s x, ty_subst s y)
  | TyVar x ->
    (try
      lookup_subst s x
    with
    | SubstUnbound -> TyVar x)
  | TyPair (x, y) -> TyPair (ty_subst s x, ty_subst s y)
  | TyList x -> TyList (subst_list s x [])
and subst_list s l arr =
  match l with
  | [] -> arr
  | x :: xr -> subst_list s xr ((ty_subst s x) :: arr)
;;
(* ty_unify : constraints -> subst *)
let rec unify c =
  match c with
  | [] -> []
  | (t1, t2) :: cr ->
      if t1 = t2 then
        unify cr
      else
        match t1, t2 with
        | TyFun (s1, r1), TyFun (s2, r2) -> unify ((s1, s2)::(r1,r2)::cr)
        | TyVar x, t -> if (ty_subst ((x, t)::[]) t) = t then (x, t) :: (unify (subst_con ((x, t)::[]) cr)) else raise TyError
        | t, TyVar x -> if (ty_subst ((x, t)::[]) t) = t then (x, t) :: (unify (subst_con ((x, t)::[]) cr)) else raise TyError
        | TyPair (s1, t1), TyPair (s2, t2) -> unify ((s1, s2) :: (t1, t2) :: cr)
        | TyList (t1 :: tr1), TyList (t2 :: tr2) -> unify ((t1, t2) :: cr)
        | (_, _) -> raise TyError
;;

tySyntax.ml
let rec print_type t =
  match t with
  | TyInt -> print_string "int"
  | TyBool -> print_string "bool"
  | TyFun (t1, t2) -> print_type t1; print_string " -> "; print_type t2
  | TyVar v -> Printf.printf "a%d" v
  | TyPair (t1, t2) -> print_type t1; print_string " * "; print_type t2
  | TyList [] -> print_string "'a list"
  | TyList (t1 :: tr) -> print_type t1; print_string " list"
;;

main.ml
let rec read_eval_print env tenv =
  print_string "# ";
  flush stdout;
  (try
    let cmd = Parser.toplevel Lexer.main (Lexing.from_channel stdin) in
    (try
      let (t, newtenv) = infer_cmd tenv cmd in
      let (id, newenv, v) = eval_command env cmd in
      (Printf.printf "%s : " id;
       print_type t;
       print_string " = ";
       print_value v;
       print_newline ();
       read_eval_print newenv newtenv)
    with
    | EvalUnbound ->
      Printf.printf "Error: Unbounded value.";
      print_newline ();
      read_eval_print env tenv
    | EvalType ->
      Printf.printf "Error: Type Missmatch.";
      print_newline ();
      read_eval_print env tenv
    | EvalZeroDivision ->
      Printf.printf "Exception: Division_by_zero.";
      print_newline ();
      read_eval_print env tenv
    | Unbound ->
      Printf.printf "Type Error.";
      print_newline ();
      read_eval_print env tenv)
  with
  | Parsing.Parse_error ->
    Printf.printf "Error: Parse failed.";
    print_newline ();
    read_eval_print env tenv
  | Lexer.Unknown ->
    Printf.printf "Error: Unknown token";
    print_newline ();
    read_eval_print env tenv)