171023 藤井陽介

【動作例】
# 1 = 2 && 3 < 4;;
- = false
# 1 = 1 && 4 < 5;;
- = true
# 1 = 2 || true;;
- = true
# false && true || true;;
- = true
# 1 && 2 = 3;;
Fatal error: exception Eval.EvalErr

【コード】
parser.mly内
expr:
  | LET var EQ expr IN expr     { ELet($2,$4,$6) }
  | IF or_bool_expr THEN expr ELSE expr { EIf($2,$4,$6) }
  | value_expr                  { $1 }
;

value_expr:
  | arith_expr                  { $1 }
  | or_bool_expr                { $1 }
;

or_bool_expr:
  | or_bool_expr OR and_bool_expr   { EOr($1,$3) }
  | and_bool_expr                   { $1 }
;

and_bool_expr:
  | and_bool_expr AND bool_expr { EAnd($1, $3) }
  | bool_expr                   { $1 }
;

bool_expr:
  | arith_expr EQ arith_expr    { EEq($1,$3) }
  | arith_expr LT arith_expr    { ELt($1,$3) }
  | atomic_expr                 { $1 }
;

syntax.ml内
| EAnd       of expr * expr
| EOr        of expr * expr

lexer.mll内
(* 問4 *)
| "&&"         { Parser.AND }
| "||"         { Parser.OR }

eval.ml内
(* 問４の範囲  *)
| EAnd (e1,e2) ->
    let v1 = eval_expr env e1 in
    let v2 = eval_expr env e2 in
    (match v1, v2 with
    | VBool b1, VBool b2 -> VBool (b1 && b2)
    | _ -> raise EvalErr)
| EOr (e1,e2) ->
    let v1 = eval_expr env e1 in
    let v2 = eval_expr env e2 in
    (match v1, v2 with
    | VBool b1, VBool b2 -> VBool (b1 || b2)
    | _ -> raise EvalErr)

【考察】
こちらも特にこまる事なく直感的に実装できた。ANDとORは真偽値に対しての演算で、かつ結合の強さに違いがあるので階層をわけてParserを実装した。これで問題なく想定通り真偽値のみをうけつけてそれ以外では例外を吐く実装となった。(このレポートを書いた後に第六回の課題にそのまま取り掛かったため、parser.mlyが多少変わっています。)
