171023 藤井陽介

【実行例】
# #use "prob3.ml";;
type 'a tree = Leaf | Node of 'a * 'a tree * 'a tree
val rev : 'a list -> 'a list -> 'a list = <fun>
val reverse : 'a list -> 'a list = <fun>
val levelacc : 'a tree list -> 'a list -> 'a list = <fun>
val levelorder : 'a tree -> 'a list = <fun>
# let tr = Node (0, (Node (1, (Node (2, Leaf, Leaf)), Leaf)), (Node (3, Leaf, (Node (4, (Node (5, Leaf, Leaf)), Leaf)))));;
val tr : int tree =
  Node (0, Node (1, Node (2, Leaf, Leaf), Leaf),
   Node (3, Leaf, Node (4, Node (5, Leaf, Leaf), Leaf)))
# levelorder tr;;
- : int list = [0; 1; 3; 2; 4; 5]

【コード】
type 'a tree =
  | Leaf
  | Node of 'a * 'a tree * 'a tree;;


let rec rev arr acc =
  match arr with
  | [] -> acc
  | x :: xs -> rev xs (x :: acc);;

(* 再帰バージョン *)
let reverse arr = rev arr [];;

let rec levelacc que acc =
  match que with
  | [] -> acc
  | tr :: xs ->
    match tr with
      | Leaf -> levelacc xs acc
      | Node (x, l, r) -> levelacc (xs @ (l :: r :: [])) (x :: acc);;

let levelorder tr = reverse (levelacc (tr :: []) []);;

【考察】
計算量： O(n^2)ぐらい
Queue的な存在の扱いが最初難しかった。Haskellのような遅延評価があればもっとスッキリ書けることが調べている時にわかったので（無限長のリストを扱うことで、線形時間ほどで幅優先探索を再帰で実現する方法）、Lazyライブラリを今度使って書き直してみたい。
