藤井陽介 05-171023

【動作例】
# #use "prob5.ml";;
val rev : 'a list -> 'a list -> 'a list = <fun>
val appr : 'a list -> 'a list -> 'a list -> 'a list = <fun>
val append : 'a list -> 'a list -> 'a list = <fun>
val filter : ('a -> bool) -> 'a list -> 'a list = <fun>
# append [1;2;3] [2;3;4];;
- : int list = [1; 2; 3; 2; 3; 4]
# filter (fun x -> x mod 2 = 0) [1;2;3;4;5;6];;
- : int list = [2; 4; 6]

【コード】
(* appendは片方から一つずつとりだしてコンスでくっつける。  *)

let rec rev arr acc =
    match arr with
    | [] -> acc
    | x :: xs -> rev xs (x :: acc);;


let rec appr a b acc =
    match b with
    | [] -> rev a acc
    | x :: xs -> appr a xs (x :: acc);;

let append a b =
    appr (rev a []) (rev b []) [];;


(* filterは１つずつ取り出してから追加していく。中にif文を入れても良いが今回はパターンマッチの条件を利用してみる。 *)

let rec filter f arr =
    match arr with
    | [] -> []
    | x :: xs when f x -> x :: filter f xs
    | x :: xs -> filter f xs;;

【考察】
コンスの右結合による制約が厳しかった。アキュミュレーターをうまく活用することで実現ができた。
